name: CI

on:
  push:
    branches: [ "**" ]
    tags: [ "v*" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write      # required to push to gh-pages
  pages: write         # required to publish to GitHub Pages
  id-token: write      # required for OIDC authentication if needed

jobs:

  # On all branches : Build + Tests
  build:
    runs-on: windows-latest
    steps:

      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for GitVersion

      # Set up .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      # Setup GitVersion
      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.x'

      # Run GitVersion to get version information
      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true

      # Restore project dependencies
      - name: Restore
        run: dotnet restore --property:EnableWindowsTargeting=true --property:Version=${{ steps.gitversion.outputs.FullSemVer }}

      # Build the project
      - name: Build
        run: dotnet build --configuration Release --no-restore --property:EnableWindowsTargeting=true --property:Version=${{ steps.gitversion.outputs.FullSemVer }}

      # Run tests and collect code coverage
      - name: Run tests with coverage
        run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage"  --logger GitHubActions --filter "Category!=Integration" --property:Version=${{ steps.gitversion.outputs.FullSemVer }}

        # Pack NuGets
      - name: Pack NuGets
        run: dotnet pack --configuration Release --no-build -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }} -o nugets
        
      # Publish Apps
      - name: Publish Console App
        run: |
          dotnet publish tools/MyNet.Xaml.Merger.Console/MyNet.Xaml.Merger.Console.csproj -c Release -p:Version=${{ steps.gitversion.outputs.FullSemVer }} -o XamlMerger

      # Zip the published console app into a single archive
      - name: Zip Console App
        run: |
          powershell -Command "Compress-Archive -Path 'XamlMerger\\*' -DestinationPath 'XamlMerger.zip' -Force"

      # Generate coverage report
      - name: Report coverage
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: '**/coverage.cobertura.xml'
          targetdir: 'coverage-report'
          reporttypes: 'Html;Cobertura;MarkdownSummary'

      # Upload coverage report as artifact
      - name: Upload coverage report as artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./coverage-report

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: '**/coverage.cobertura.xml'
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      # Upload nugets
      - name: Upload NuGets
        uses: actions/upload-artifact@v4
        with:
            name: NuGets
            path: "nugets"

      # Upload Console App
      - name: Upload Console App
        uses: actions/upload-artifact@v4
        with:
          name: XamlMerger.zip
          path: "XamlMerger.zip"

  # Only on main branch : Deploy coverage report
  deploy-coverage:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Only on version tags : Publish Nugets + Update Changelog + Create Release
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:

      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download NuGets
      - name: Download NuGets
        uses: actions/download-artifact@v4
        with:
          name: NuGets
          path: "nugets"

      # Download Console App
      - name: Download Console App
        uses: actions/download-artifact@v4
        with:
          name: XamlMerger.zip
          path: "."

      # Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          
      # Push NuGet package to NuGet.org
      - name: Push to NuGet.org
        run: dotnet nuget push "./nugets/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate

      # Update CHANGELOG with all conventional commit from previous tag
      - name: Update CHANGELOG
        continue-on-error: true
        id: changelog
        uses: requarks/changelog-action@v1.10.2 # https://github.com/marketplace/actions/changelog-from-conventional-commits
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}

      # Commit changes in CHANGELOG and skip CI
      - name: Commit CHANGELOG.md
        continue-on-error: true
        uses: stefanzweifel/git-auto-commit-action@v6.0.1 # https://github.com/marketplace/actions/git-auto-commit
        with:
          branch: main
          commit_message: 'docs: update CHANGELOG.md for ${{ github.ref_name }} [skip ci]'
          file_pattern: CHANGELOG.md

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changes }}
          draft: false
          prerelease: false
          files: |
            nugets/*.nupkg
            XamlMerger.zip